type: install
id: hedgedoc
version: '1.0'
appVersion: latest
name: Hedgedoc
logo: https://raw.githubusercontent.com/TaylorJadin/hedgedoc-jps/main/logo.png
homepage: https://reclaim.cloud
categories: 
- apps/education
description: 
  text: "HedgeDoc (formerly known as CodiMD) is an open-source, web-based, self-hosted, collaborative markdown editor. You can use it to easily collaborate on notes, graphs and even presentations in real-time. All you need to do is to share your note-link to your co-workers and theyâ€™re ready to go."
  short: "HedgeDoc is an open-source, web-based, self-hosted, collaborative markdown editor."

globals:
  shortname: hedgedoc
  path: /root/hedgedoc
  repo: https://github.com/TaylorJadin/hedgedoc-jps
  dbPass: ${fn.password}

nodes:
  nodeType: dockerengine
  nodeGroup: cp
  cloudlets: 32
  fixedcloudlets: 1
  extip: true
  displayName: AppServer
  addons: [change-domain, update]
  volumes: ["${globals.path}"]

settings:
  domain:
    fields:
      - name: displayfield
        type: displayfield
        hideLabel: true
        markup: |
          The new domain should already have an A record pointed at this environment's IP address.
      - name: domain
        hideLabel: true
        caption: Domain
        type: string
        vtype: extdomain

onInstall:
  - setup

actions:
  setup:      
    - cmd[cp]: |-
        # Update packages
        yum update -y
        
        # set up hedgdoc folder and get files
        mkdir -p ${globals.path}
        cd ${globals.path}
        git clone ${globals.repo} --depth 1 .
        rm -rf .git
        rm manifest.yaml
        rm logo.png

        # set up upload fodler with the correct permissions
        mkdir -p ${globals.path}/uploads/
        chown -R 10000:10000 ${globals.path}/uploads/
        
        # set up .env file
        sed -i \
        -e "s|DOMAIN=.*|DOMAIN=${env.domain}|" \
        -e "s|EMAIL=.*|EMAIL=${user.email}|" \
        -e "s|DATABASE_PASSWORD=.*|DATABASE_PASSWORD=${globals.dbPass}|" \
        .env

        # make handy bash alias
        echo "alias manage_users='cd ${globals.path} && docker-compose exec app bin/manage_users'" >> ~/.bashrc
        
        # start up hedgedoc and add a user account
        docker-compose up -d
        sleep 5
        docker-compose exec -T app bin/manage_users --add ${user.email} --pass ${user.appPassword}
    - env.file.AddFavorite:
        nodeGroup: cp
        path: ${globals.path}
        keyword: ${globals.shortname}

addons:
  - id: change-domain
    name: Domain Configuration
    description: Change domain name and issue Let's Encrypt certificates.
    permanent: true
    buttons:
      - confirmText: Are you sure you want to proceed?
        loadingText: Changing domain...
        action: changeDomain
        caption: Change
        successText: The domain has been updated successfully!
        settings: domain
        title: Please specify the new domain name

    actions:
      changeDomain:
        - cmd[cp]: |-
            cd ${globals.path}
            sed -i \
            -e "s|DOMAIN=.*|DOMAIN=${settings.domain}|" \
            .env
            docker-compose up -d --force-recreate
    
  - id: update
    name: Update
    description: Pull the latest version of docker containers
    permanent: true
    buttons:
      - confirmText: Are you sure you want to proceed?
        loadingText: Updating...
        action: pullContainers
        caption: Update
        successText: Your environment has been updated!
        title: Update
    actions:
      pullContainers:
        -  cmd[cp]: |-
            cd ${globals.path}
            docker-compose pull
            docker-compose down
            docker-compose up -d --force-recreate
success: | 
  **${env.displayName}**: [https://${env.domain}/](https://${env.domain}/)
  
  **Username:** ${user.email}
  
  **Password:** ${user.appPassword}

  - You can create additional user accounts in Hedgedoc by opening the terminal and using the `manage_users` command.
  
  - If you want to map a custom domain, point an A record at **${nodes.cp.extIPs}** then use the **Domain Configuration** Add-On to change the domain name and issue a new Let's Encrypt cert.